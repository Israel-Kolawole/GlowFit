# Deconvolution of single TL peak with Lambert-OTOR equation
from scipy import optimize
import numpy as np
import matplotlib.pyplot as plt
from prettytable import PrettyTable 
import warnings
warnings.filterwarnings("ignore")
from scipy.special import lambertw
import os
os.chdir('C:/Users/Bill Pagonis/Desktop/pythonVP')
data = np.loadtxt('glocanin1.txt')
x_data,y_data = data[:, 0], data[:, 1]/max( data[:, 1])
kB, beta=  8.617e-5,  1
def W_func(T,A,sprime, E, c): 
   expint=kB*(T**2.0)/(beta*E)*np.exp(-E/(kB*T))*(1-2*kB*T/E)
   zTL=(1/c)-np.log(c)+(sprime*expint)
   lam=np.real(lambertw(np.exp(zTL)))
   return A*np.exp(-E/(kB*T))/(lam+lam**2)                               
params, cov=optimize.curve_fit(W_func,x_data,y_data,([1e10,2e9,\
1.,10]),bounds=((1e8,1e8,.9,1e-4),(1e15,1e14,1.3,1e3)))
plt.subplot(2,1, 1)
plt.scatter(x_data, y_data, label='Experiment')
plt.plot(x_data, W_func(x_data, *params),
c='r',linewidth=3, label='KV-TL equation')
leg = plt.legend()
leg.get_frame().set_linewidth(0.0)
plt.ylabel('TL signal [a.u.]')
plt.xlabel(r'Temperature T [K]')
plt.text(400, .5,'Glocanin')
plt.text(400, .37,'Project')
plt.xlim(375,550);
plt.subplot(2,1, 2)
plt.plot(x_data,W_func(x_data, *params)-\
y_data,c='r',linewidth=2,label='Residuals')
leg = plt.legend()
leg.get_frame().set_linewidth(0.0)
plt.ylabel('Residuals')
plt.xlabel(r'Temperature T [K]')
plt.ylim(-.05,.05);
plt.xlim(375,550);
plt.tight_layout()
A=format(params[0],"10.1E")
sprime=format(params[1],"10.1E")
E=round(params[2],3)
c=round(params[3],2)
dsprime = format(np.sqrt(cov[1][1]),"10.1E")
dE = round(np.sqrt(cov[2][2]),3)
res=W_func(x_data, *params)-y_data
FOM=round(100*np.sum(abs(res))/np.sum(y_data),3)
myTable = PrettyTable([ "A", "s' (K^-1)","E(eV)","dE(eV)","c",\
"FOM(%)"]) 
myTable.add_row([A,sprime,E,dE,c,FOM]);
print(myTable)
plt.show()
